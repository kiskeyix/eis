#!/usr/bin/perl -w
# $Revision: 1.10 $
# $Date: 2007/05/03 20:37:08 $
# Luis Mondesi <lemsx1@gmail.com>
#
# DESCRIPTION: Teis script imports an XML file to the database where Hardware Inventory System (EIS) is kept. It will attempt to deduce some strings from the XML file.
# USAGE: $0 file.xml
# LICENSE: GPL

=pod

=head1 NAME

eis-import-file - script to import file content into various tables in EIS

=head1 DESCRIPTION 

    Teis script imports an XML file to the database where Hardware Inventory System (EIS) is kept. It will attempt to deduce some strings from the XML file content and its name.

    The XML file is assumed to have the following format:

<?xml version="1.0" standalone="yes" ?>

<!-- generated by lshw-B.02.08.01 -->

... other comments ...

<node id="hostname" ... >

... other blocks ...

</node>

=cut

use strict;
use lib '/usr/local/lib/site_perl';
$|++;

my $revision = '$Revision: 1.10 $';    # version
$revision =~ s/(\\|Revision:|\s|\$)//g;

# standard Perl modules
use File::Basename qw( basename );
use Getopt::Long;
Getopt::Long::Configure('bundling');

use EIS::Tables::Host;
use EIS::Tables::XML;
use EIS::Tables::Software;
use EIS::Tables::Service;
use EIS::Tables::Log;

use EIS::XML qw( :all );

# Args:
my $PVERSION = 0;
my $HELP     = 0;
my $USAGE    = 0;
my $DEBUG    = 0;
my $FILE     = undef;

=pod

=head1 SYNOPSIS

B<eis-import-file>  [-v,--version]
                [-D,--debug] 
                [-h,--help]
                [-U,--usage]
                <XML_FILE>

=head1 OPTIONS

=over 8

=item -v,--version

Prints version and exits

=item -D,--debug

Enables debug mode

=item -h,--help

Prints this help and exits

=item -U,--usage

Prints usage information and exits

=back

=cut

# get options
GetOptions(

    # flags
    'v|version' => \$PVERSION,
    'h|help'    => \$HELP,
    'D|debug'   => \$DEBUG,
    'U|usage'   => \$USAGE,

    # strings
    #'o|option=s'       =>  \$NEW_OPTION,
    # numbers
    #'a|another-option=i'      =>  \$NEW_ANOTHER_OPTION,
) and $FILE = shift;

if ($HELP)
{
    use Pod::Text;
    my $parser = Pod::Text->new(sentence => 0, width => 78);
    $parser->parse_from_file($0, \*STDOUT);
    exit 0;
}

sub _usage
{
    use Pod::Usage;
    pod2usage(1);
}

if ($USAGE or not defined $FILE or not -r $FILE)
{
    _usage();
    exit 0;    # never reaches here
}

if ($PVERSION) { print STDOUT ($revision, "\n"); exit 0; }

my $obj =
  EIS::XML->new('config_file' => '/etc/eis/eis.conf', 'xml_file' => $FILE);

my $_xml = $obj->get_key('/node', 1);

#use Data::Dumper;
#print Dumper($_xml);

my $hostname = _short_hostname($_xml->{'/node'}->{'id'});

die("Cannot collect information about a host named 'localhost' as this is a common name\n"
   )
  if ($hostname eq 'localhost');

if (basename($FILE) =~ /^$hostname/i)
{
    print STDOUT ("Looking Hostname '$hostname' in Database '"
                  . $obj->get_option('db_name') . "'\n")
      if ($DEBUG);
    my $_host_table = EIS::Tables::Host->new();
    my $_host_id = $_host_table->retrieve('hostname' => $hostname);
    print STDOUT ("Found host id '$_host_id'\n") if ($DEBUG);
    if (not defined($_host_id) or $_host_id eq 0)
    {
        if (basename($FILE) =~ /hardware\.xml$/)
        {

            # not found, adding one
            my $_id = $_host_table->insert({'hostname' => $hostname});

            #use Data::Dumper;
            #print Dumper($host_id);
            $_host_id = $_id->id();
        }
        else
        {
            my $_msg =
              "Please add a $hostname-hardware.xml file first. Use 'lshw -xml' to produce the content for such file";
            EIS::Tables::Log->insert({'log' => $_msg});
            die($_msg);
        }
    }

    print("Using host id: $_host_id\n") if ($DEBUG);

    # get XML content and insert into table:
    my $_xml_content = "";
    {
        undef $/;    # slurp mode
        open(FILE, "<$FILE") or die("Could not open $FILE. $!\n");
        $_xml_content = <FILE>;

        #print $_xml_content;
        close(FILE);
    }
    my $_xml_table = undef;

    if (basename($FILE) =~ /hardware\.xml$/)
    {
        $_xml_table = EIS::Tables::XML->new();
    }
    elsif (basename($FILE) =~ /software\.xml$/)
    {
        $_xml_table = EIS::Tables::Software->new();
    }
    elsif (basename($FILE) =~ /service\.xml$/)
    {
        $_xml_table = EIS::Tables::Service->new();
    }
    else
    {
        my $_msg = "Format not recognized for file. Try:\n$0 --help\n";
        EIS::Tables::Log->insert({'log' => $_msg});
        die($_msg);
    }

    my $_xml = $_xml_table->retrieve('host' => $_host_id);
    if (defined($_xml))
    {

        # update existing XML id
        $_xml->xmlcontent($_xml_content);
        $_xml->update();
        EIS::Tables::Log->insert(
                      {'log' => "Updated existing host with hostid $_host_id"});
    }
    else
    {

        # create new XML and let SQL decide the id
        $_xml_table->insert(
                          {'xmlcontent' => $_xml_content, 'host' => $_host_id});
        EIS::Tables::Log->insert(
                          {'log' => "Created host entry for hostid $_host_id"});
    }

}
else
{
    my $_msg =
      "Hostname defined in XML does not match filename format: hostname-{hardware,software,service}.xml\n";
    print STDERR ($_msg);
    EIS::Tables::Log->insert({'log' => $_msg});

    exit(1);
}

# helper functions #
sub _short_hostname
{
    my $host = shift;
    my @_str = split(/\./, $host);
    return $_str[0];
}

=pod

=head1 AUTHORS

Luis Mondesi <lemsx1@gmail.com>

=cut

